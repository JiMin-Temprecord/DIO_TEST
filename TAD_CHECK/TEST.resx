<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwg
        JC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAGQAPADASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDx6ijNHWvSOcM0UdKM0AFFFFOwB+FFFBFAB2pKUijFMBPwpc0E
        UuKYB/OjmjFLQIKTNLRQACjNFFABRRRQAZzR2oooATGKQ/hTqSkAgopKXpSGFFFFIBMc0Ype9FABRmjF
        LiqsAnFFLiigBMUvApaTFMQUtJilxQAUUUUAFFGKKACijFGKACjFLRTEFFFFABRiilxSASkpaMUAJRRS
        0DG4opcUYoATFJTqQilYBKKU0lKwx1FLijFUITFLS4pKBCUuKWimAmKAKWigBuKUClxRQAlFLRRYBKXF
        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
        rSFKB3K5Wk21OVppWgdzS207bUgXNO2UjluRbeelKEqbbShaAuRBDS7Km20bKQXIttG2ptlLtouFyDZS
        7Km20uyi47kGyjb7VPto20DIdtJsqfZRsoAg2Umyp9tJtoHcgKUm2pytGygCttNJtqwUppSgZBtpCtTl
        aQrQBXK0hSpytN20DIClNK1Y200rTuFyArTStTlaQrQO5Bt5ppWpytIVoHc0gtO2+1SBadtpXOYi20oW
        pQlO2UrgQ7aULU2z2pQtK4XIcUuPaptvtRtouO5Fto2+1TbaNtK4XIdtG2p9tG2ncdyDbRtqfbSbaLjI
        dtJtqbbSFaLgQ7fakK1Nto20XGQbaTbU22jbTuBAVpCtT7aaVoAgK00rVgrTStMCuUpu2rG2kKUDuVit
        IUqcpTStAyApTdtWCvFNK0AaYWnBak20uKgwGBaXbTwtO20AR7aXFSBaNtAEe2lxUm00baBke2jbUmyl
        C0AR7aNtS7fajbSGRbaTbU22k20XGRbaTbU22kxQBCVpNtTYo20xkO3ikK1NtpCtAEBWmlasbaaVoAg2
        00rVgrTStFwICtN21YK00rTuMgK00rU+2kK07gVytNK1OVpCtFxmltp22n7adiouYEYWnbaeFpcUAR7a
        XbUmKMUhke2l20/FLtoGR7aULT8Cl20XAj20u2pMUYouOxHtpNtS7aTFFxke32pClS4o20XAh20m2ptt
        JigCErSbam20m2ncCEr7U0rU+2m7aBkJWkK1MVpNtAEG2k21NtpNtMCDbTStWCtNK0AVylJtqcrTStAG
        jtpcU/FLioMhm2lxTwKMUDGbaXFPC0baBjMUuKftpdvtQAwL7Uu2n7aXbSGR4o21Jto20DI9tGKk20ba
        BkWKNtS7aTbRcRHikIqTbRtoAh20m2psUmKYERFJtqXFJigCErSFamK00rTAhK0hWpsUEUXAgK03bU5W
        m7adwIdtIVqbbSFaALu2lC07FOxUEDNtLingUYoGMxS7afil20AR7TTtuKfto20rjG4oxT8UYoGMxRin
        4oxQMZijbT9tGKAGYoxT8UmKAI9tIRUuKTFAERFGKkxRtpgRbaQrUpWmkUARkU0ipcUmKYEW2k21Nim4
        oAjK03FSkUbaBEOKTbUpUUm2mBbAoxTgKXHFQQNApdtOxSgUDEAoxTsUuKB2GgUYp2KMUh2G4oxT8Uba
        BjcUbaftoxRcYzFGKfijFADMUYp+KTFADMUbafikxQAzFJipMUmKYEeKTFSYoxQBGRTdtS7aNtAiLFJt
        qTbRigCHFJipsUhFMCHbRtqXbSFaYE+KWlpwFQQNApcU7FLilcaQ3FGKdilAouUNx7UYp+KMUgGgYoxT
        sUYoGNxS4pcUYoAbiinYooGNxSYp9JigBuKMU7FJigBuKMU7FGKdwGEUYp+KTFO4DMUYp2KMUXEMxSYp
        +KMUwI8UEU/FGKAI8UmKkxSYoES4pcU4ClxUXJG4pcU6ikUJijFOxRii4xMUYFOxRSAbj2oxTqMUDG4o
        xTsClouAzFGKdijFFxjKKfjNJincBtJinhaNtFwsMxRinYoxRcLDcUlOopgNxSYp+KTFFwGYoxT8UmKB
        DcUmKfijFO4DKTFPxRii4iTFLinbG/un8qXY3oai5I3FGKfsb0NGxv7ppXKG4oxTtjf3T+VLsb+6aLjG
        YpcU7Y3900bW9D+VK4DaORTirehpNreh/Ki4xtFO2sf4TSbW/umi4xKKXa3ofypdh9D+VFwG4oxTtjf3
        T+VG1v7p/KncBuKMU7a390/lRsb0P5UXAbikxT9jeho2N/dP5UXAj2j0pdop+1vQ0bW9DRcCMikxUpQ+
        hpNjehouIjxSYqTY390/lRtPoadwI8UYqTaf7ppCjH+E0XAjxRipDG3ofypNjf3T+VO4j//Z
</value>
  </data>
</root>